#lang scheme

(define (sign n)
  (if (> n 0) 1
      (- 1)
      )
  )

;; Exercise 2.1
(define (make-rat n d)
  (let ((g (gcd n d)))
  (cons (* (sign d) (/ n g)) (* (sign d) (/ d g))))
  )

(define (numer x) (car x))
(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x))
  )

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y)) (* (denom x) (numer y)))
            (* (denom x) (denom y))
            )
  )


;;(define x (make-rat 1 2))
;;(define y (make-rat 3 4))

;; Exercise 2.2
